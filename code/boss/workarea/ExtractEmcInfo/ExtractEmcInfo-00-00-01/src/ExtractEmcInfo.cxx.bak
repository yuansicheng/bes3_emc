#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/AlgFactory.h"
#include "GaudiKernel/Algorithm.h"
#include "GaudiKernel/ISvcLocator.h"
#include "GaudiKernel/SmartDataPtr.h"
#include "GaudiKernel/IDataProviderSvc.h"
#include "GaudiKernel/PropertyMgr.h"
#include "GaudiKernel/Bootstrap.h"
#include "EventModel/EventModel.h"
#include "EventModel/Event.h"
#include "EvtRecEvent/EvtRecEvent.h"
#include "EvtRecEvent/EvtRecTrack.h"
#include "EventModel/EventHeader.h"
#include "DstEvent/TofHitStatus.h"
#include "McTruth/McParticle.h"
#include "McTruth/DecayMode.h"
#include "McTruth/MdcMcHit.h"
#include "McTruth/TofMcHit.h"
#include "McTruth/EmcMcHit.h"
#include "McTruth/TofMcHit.h"
#include "McTruth/MucMcHit.h"
#include "McTruth/McEvent.h"
#include "TMath.h"
#include "GaudiKernel/INTupleSvc.h"
#include "GaudiKernel/NTuple.h"
#include "GaudiKernel/Bootstrap.h"
#include "GaudiKernel/IHistogramSvc.h"
#include "CLHEP/Vector/ThreeVector.h"
#include "CLHEP/Vector/LorentzVector.h"
#include "CLHEP/Vector/TwoVector.h"
#include "CLHEP/Geometry/Point3D.h"
#include "EmcRecGeoSvc/EmcRecBarrelGeo.h"
#include "EmcRecGeoSvc/EmcRecGeoSvc.h"

#include "ExtractEmcInfo/ExtractEmcInfo.h"

/////////////////////////////////////////////////////////////////////////////

ExtractEmcInfo::ExtractEmcInfo(const std::string& name, ISvcLocator* pSvcLocator) : Algorithm(name, pSvcLocator) {
    
}

/////////////////////////////////////////////////////////////////////////////

StatusCode ExtractEmcInfo::initialize(){
    MsgStream log(msgSvc(), name());
		
	log << MSG::INFO << "in initialize()" << endmsg;
	
	StatusCode status;

    bookNTuple();
    
    m_event = 0;

    log << MSG::INFO << "successfully return from initialize()" <<endmsg;
  	return StatusCode::SUCCESS;
}

StatusCode ExtractEmcInfo::execute(){
    MsgStream log(msgSvc(), name());
		
	log << MSG::INFO << "in execute()" << endmsg;
	
	StatusCode status;

    getInfoFromMcParticleCol();
    getInfoFromRecEmcCol();
    getLeadingShower();

    m_tuple->write();
    m_event += 1;

    return StatusCode::SUCCESS;

}

StatusCode ExtractEmcInfo::finalize(){
    MsgStream log(msgSvc(), name());
		
	log << MSG::INFO << "in finalize()" << endmsg;
	
	StatusCode status;

    return StatusCode::SUCCESS;

}

/////////////////////////////////////////////////////////////////////////////

bool ExtractEmcInfo::bookNTuple(){
    m_tuple = ntupleSvc()->book ("FILE1/EmcInfo", CLID_ColumnWiseTuple, "N-Tuple");

    m_tuple->addItem("event", m_event);

    m_tuple->addItem("momentum", m_momentum);
    m_tuple->addItem("theta", m_theta);
    m_tuple->addItem("phi", m_phi);

    m_tuple->addItem("all_hit_index", m_all_hit_index, 0, 1000);
    m_tuple->addIndexedItem("all_hit_cell_id", m_all_hit_index, m_all_hit_cell_id);
    m_tuple->addIndexedItem("all_hit_energy", m_all_hit_index, m_all_hit_energy);

    m_tuple->addItem("leading_shower_hit_index", m_leading_shower_hit_index, 0, 25);
    m_tuple->addItem("leading_shower_id", m_leading_shower_id);
    m_tuple->addIndexedItem("leading_shower_hit_cell_id_5x5", m_leading_shower_hit_index, m_leading_shower_hit_cell_id_5x5);

    return true;
}

bool ExtractEmcInfo::getInfoFromMcParticleCol(){
    // momentum, theta, phi
    SmartDataPtr<Event::McParticleCol> mc_particle_col(eventSvc(), "/Event/MC/McParticleCol");
	if (!mc_particle_col){
	 	std::cout << "Could not retrieve McParticelCol" << std::endl;
	  	return false;
    }
    // now our file just contians one anti-n0
    Event::McParticleCol::iterator iter_mc = mc_particle_col->begin();
    double px = (*iter_mc)->initialFourMomentum().x();
    double py = (*iter_mc)->initialFourMomentum().y();
    double pz = (*iter_mc)->initialFourMomentum().z();

    m_theta = (*iter_mc)->initialFourMomentum().theta();
    m_phi = (*iter_mc)->initialFourMomentum().phi();
    m_momentum = sqrt(px*px+py*py+pz*pz);
    return true;
}

bool ExtractEmcInfo::getInfoFromRecEmcCol(){
    // EMC infomation
    SmartDataPtr<RecEmcHitCol> rec_emc_hit_col(eventSvc(),"/Event/Recon/RecEmcHitCol");
    if (!rec_emc_hit_col)
    {   
        std::cout << "Could not retrieve RecEmcHitCol" << std::endl;
        return false;
    }
    m_all_hit_index = 0;
    for(RecEmcHitCol::iterator it=rec_emc_hit_col->begin(); it!= rec_emc_hit_col->end(); it++)
    {
        m_all_hit_cell_id[m_all_hit_index] = (*it)->getCellId();
        m_all_hit_energy[m_all_hit_index] = (*it)->getEnergy();
        m_all_hit_index ++;
    }
    return true;
}

bool ExtractEmcInfo::getLeadingShower(){
    // leading shower infomation
    SmartDataPtr<RecEmcShowerCol> rec_emc_shower_col(eventSvc(),"/Event/Recon/RecEmcShowerCol");
    if (!rec_emc_shower_col)
    {   
        std::cout << "Could not find EMC emcShowerCol" << std::endl;
        return false;
    }
    
    for(RecEmcShowerCol::iterator shower=rec_emc_shower_col->begin(); shower!= rec_emc_shower_col->end(); shower++){
        // This loop can extract all shower infomation, but now we just need the leading shower
        m_leading_shower_id = (*shower)->getShowerId().get_value();
        RecEmcIDVector cell_id_5x5 = (*shower)->getCellId5x5();
        m_leading_shower_hit_index = 0;
        for(RecEmcIDVector::iterator hit=cell_id_5x5.begin(); hit!=cell_id_5x5.end(); hit++){
            m_leading_shower_hit_cell_id_5x5[m_leading_shower_hit_index] = (*hit).get_value();
            m_leading_shower_hit_index ++;
        }
        break;
    }
}